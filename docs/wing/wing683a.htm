<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>WinGCreateBitmap</TITLE>
</HEAD>

<BODY BGCOLOR="#FFFFFF" TEXT="#000000">

<OBJECT TYPE="application/x-oleobject" CLASSID="clsid:1e2a7bd0-dab9-11d0-b93a-00c04fc99f9e">
	<PARAM NAME="Keyword" VALUE="Create100x100WinGDC">
	<PARAM NAME="Keyword" VALUE="Destroy100x100WinGDC">
	<PARAM NAME="Keyword" VALUE="Sample Code">
	<PARAM NAME="Keyword" VALUE="WinGBitmap">
	<PARAM NAME="Keyword" VALUE="WinGCreateBitmap">
</OBJECT>

<P><A NAME=".du5u6"></A>WinGCreateBitmap</P>

<P>Creates a WinGBitmap for the given WinGDC using the specified header information.</P>

<P><A HREF="wing8g8p.htm"><B>HBITMAP</B></A><B> WinGCreateBitmap( HDC </B><I>hWinGDC</I><B>, BITMAPINFO far *</B><I>pHeader</I><B>, void far *far *</B><I>ppBits</I><B> )</B></P>

<P><B>Parameters</B></P>

<TABLE cols=2 width=548>

<TR VALIGN="top">
<TD width=16%><I>hWinGDC</I></TD>
<TD width=84%>Identifies the WinG device context.</TD>
</TR>

<TR VALIGN="top">
<TD width=16%><I>pHeader</I></TD>
<TD width=84%>Points to a <A HREF="wing8g8p.htm">BITMAPINFO</A> structure specifying the width, height, and color table for the new WinGBitmap.</TD>
</TR>

<TR VALIGN="top">
<TD width=16%><I>ppBits</I></TD>
<TD width=84%>If not 0, points to a pointer to receive the address of the new WinGDC DIB surface.</TD>
</TR>
</TABLE><BR>

<P><B>Return Value</B></P>

<P>Returns a handle to the new WinGBitmap DIB surface or 0 if it is unsuccessful.</P>

<P><B>Comments</B></P>

<P>Currently, under Windows 3.1 and Win32s, <B>WinGCreateBitmap</B> will only create 8-bit-per-pixel surfaces.</P>

<P>If ppBits is 0, the address of the newly created bitmap will not be returned. <A HREF="wing3t67.htm">WinGGetDIBPointer</A> will return this information if you choose to ignore it here.</P>

<P><I>pHeader</I> must point to enough memory to hold a <A HREF="wing8g8p.htm">BITMAPINFOHEADER</A> and a complete color table of <A HREF="wing8g8p.htm">RGBQUAD</A> entries. The biClrUsed field of the <A HREF="wing8g8p.htm">BITMAPINFOHEADER</A> specifies the number of colors in the color table; if it is zero, the maximum number of colors according to biBitCount are used if biBitCount is less than 24. For example, if biBitCount is 8 and biClrUsed is 0, 256 palette entries are expected. See the <A HREF="wing8g8p.htm">BITMAPINFOHEADER</A> description in the Windows 3.1 SDK Reference for more information.</P>

<P>When an application has finished using a WinGBitmap, it should select the bitmap out of its WinGDC and remove the bitmap by calling <A HREF="wing8g8p.htm">DeleteObject</A>.</P>

<P>The pointer to the WinGBitmap DIB surface returned by <B>WinGCreateBitmap</B> must not be freed by the caller. The allocated memory will be freed by a call to <A HREF="wing8g8p.htm">DeleteObject</A>.</P>

<P><B>WinGCreateBitmap</B> uses <I>pHeader</I> and the subsequent color table to create the drawing surface. WinG ignores the biClrImportant, biXPelsPerMeter, biYPelsPerMeter, and biSizeImage fields. WinG expects biCompression to be BI_RGB.</P>

<P>If the biHeight field of the passed <A HREF="wing8g8p.htm">BITMAPINFOHEADER</A> is negative, <B>WinGCreateBitmap</B> will create a <A HREF="wing7jfs.htm">top-down</A> DIB as the bitmap surface. See the article on <A HREF="wing7sxa.htm">DIB Orientation</A> for a discussion of <A HREF="wing7jfs.htm">top-down</A> and <A HREF="wing8zq9.htm">bottom-up</A> DIBs.</P>

<P>An <A HREF="wing8g8p.htm">HBITMAP</A> can only be selected into one device context at a time, and a device context can only have a single <A HREF="wing8g8p.htm">HBITMAP</A> selected in at a time.</P>

<P><B>WinGCreateBitmap</B> is very similar to the new <A HREF="wing81mh.htm">CreateDIBSection</A> API. CreateDIBSection is a Win32 API available on Windows 95 and Windows NT 3.5.</P>

<P><B>Maximizing Performance</B></P>

<P>To create a WinGBitmap that will maximize <A HREF="wing7kaf.htm">WinGBitBlt</A> performance, use <A HREF="wing33hw.htm">WinGRecommendDIBFormat</A> to fill in the entries of <I>pHeader</I> before calling <B>WinGCreateBitmap</B>, remembering to modify the height and width to suit your needs.</P>

<P>Larger WinGBitmaps take longer to blt to the screen. Also, if the screen DC is clipped, for example by an overlapping window or by a selected clip region, the WinGDC will take longer to blt to the screen.</P>

<P>Using an <A HREF="wing7bxq.htm">identity palette</A> that exactly matches the WinGBitmap's <A HREF="wing0yhv.htm">color table</A> will greatly increase performance.</P>

<P>In 16 bit code, the pointer to the bits can be accessed with 32 bit offsets in assembly, like all huge objects in Windows.</P>

<P><B>Example</B></P>

<P>The following code fragment shows how an application could create a WinGDC with an optimal 100x100 WinGBitmap selected for drawing, then delete it when it is no longer needed. Note that the WinGBitmap will initially have garbage in its color table--be sure to call <A HREF="wing47c8.htm">WinGSetDIBColorTable</A> before using the WinGDC.</P>

<P>The <A HREF="wing4i5q.htm">PALANIM</A> sample (in the SAMPLES\PALANIM subdirectory of the WinG development kit) uses these routines, modified to create a 256x256 WinGDC, to allocate and free its drawing buffer.</P>

<P><A HREF="wing6oqg.htm">Click Here</A> to copy this code sample to the clipboard.</P>

<P><A HREF="wing8g8p.htm">HBITMAP</A> ghBitmapMonochrome = 0;</P>

<P><A HREF="wing8g8p.htm">HDC</A> Create100x100WinGDC(void)</P>

<P>{</P>

<P><A HREF="wing8g8p.htm">HDC</A> hWinGDC;</P>

<P><A HREF="wing8g8p.htm">HBITMAP</A> hBitmapNew;</P>

<P>struct {</P>

<P><A HREF="wing8g8p.htm">BITMAPINFOHEADER</A> InfoHeader;</P>

<P><A HREF="wing8g8p.htm">RGBQUAD</A> ColorTable[256];</P>

<P>} Info;</P>

<P>void far *pSurfaceBits;</P>

<P>// Set up an optimal bitmap</P>

<P>if (<A HREF="wing33hw.htm">WinGRecommendDibFormat</A>((<A HREF="wing8g8p.htm">BITMAPINFO</A> far *)&amp;Info) == FALSE)</P>

<P>return 0;</P>

<P>// Set the width and height of the DIB but preserve the</P>

<P>// sign of biHeight in case <A HREF="wing7jfs.htm">top-down</A> DIBs are faster</P>

<P>Info.InfoHeader.biHeight *= 100;</P>

<P>Info.InfoHeader.biWidth = 100;</P>

<P>// Create a WinGDC and Bitmap, then select away</P>

<P>hWinGDC = <A HREF="wing414i.htm">WinGCreateDC</A>();</P>

<P>if (hWinGDC)</P>

<P>{</P>

<P>hBitmapNew = <B>WinGCreateBitmap</B>(hWinGDC,</P>

<P>(<A HREF="wing8g8p.htm">BITMAPINFO</A> far *)&amp;Info, &amp;pSurfaceBits);</P>

<P>if (hBitmapNew)</P>

<P>{</P>

<P>ghBitmapMonochrome = (<A HREF="wing8g8p.htm">HBITMAP</A>)<A HREF="wing8g8p.htm">SelectObject</A>(hWinGDC,</P>

<P>hBitmapNew);</P>

<P>}</P>

<P>else</P>

<P>{</P>

<P><A HREF="wing8g8p.htm">DeleteDC</A>(hWinGDC);</P>

<P>hWinGDC = 0;</P>

<P>}</P>

<P>}</P>

<P>return hWinGDC;</P>

<P>}</P>

<P>void Destroy100x100WinGDC(<A HREF="wing8g8p.htm">HDC</A> hWinGDC)</P>

<P>{</P>

<P><A HREF="wing8g8p.htm">HBITMAP</A> hBitmapOld;</P>

<P>if (hWinGDC &amp;&amp; ghBitmapMonochrome)</P>

<P>{</P>

<P>// Select the stock 1x1 monochrome bitmap back in</P>

<P>hBitmapOld = (<A HREF="wing8g8p.htm">HBITMAP</A>)<A HREF="wing8g8p.htm">SelectObject</A>(hWinGDC,</P>

<P>ghBitmapMonochrome);</P>

<P><A HREF="wing8g8p.htm">DeleteObject</A>(hBitmapOld);</P>

<P><A HREF="wing8g8p.htm">DeleteDC</A>(hWinGDC);</P>

<P>}</P>

<P>}</P>

<P><B>See Also</B></P>

<P><A HREF="wing414i.htm">WinGCreateDC</A> <A HREF="wing33hw.htm">WinGRecommendDIBFormat</A> <A HREF="wing8g8p.htm">CreateBitmap</A><A HREF="wing8g8p.htm">CreateCompatibleBitmap</A> <A HREF="wing8g8p.htm">BITMAPINFO</A> <A HREF="wing8g8p.htm">BITMAPINFOHEADER</A> <A HREF="wing3t67.htm">WinGGetDIBPointer</A> <A HREF="wing81mh.htm">CreateDIBSection</A> <A HREF="wing4y0j.htm">Code Samples</A> <A HREF="wing6sha.htm">Off-screen Drawing With WinG</A> <A HREF="wing4tr9.htm">Maximizing Performance With WinG</A></P>

</BODY>
</HTML>
